<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Curriculum Transparency Tracker</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom Styles to enhance the medical/professional aesthetic */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7f9fb; /* Very light, professional background */
        }
        .header-bg {
            background-color: #5d3f9f; /* Deep, professional purple */
        }
        .thread-card {
            border-left: 5px solid #a6c0e5; /* Light blue stripe for emphasis */
            transition: transform 0.2s;
        }
        .thread-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .reply-box {
            background-color: #e6f1f4; /* Light teal/blue for admin response background */
        }
        .scroll-container {
            max-height: 75vh; /* Limit height on desktop for scrolling */
            overflow-y: auto;
        }
        /* Mobile adjustments */
        @media (max-width: 640px) {
            .scroll-container {
                max-height: 80vh;
            }
            .header-text {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body class="antialiased">

    <!-- Header Section -->
    <header class="header-bg p-6 shadow-xl">
        <div class="container mx-auto">
            <h1 class="text-4xl font-extrabold text-white header-text">Curriculum Transparency Tracker</h1>
            <p class="text-lg text-indigo-100 mt-1">Live feedback, voting, and official responses from the Medical Student Government.</p>
        </div>
    </header>

    <!-- Main Content Container -->
    <main class="container mx-auto p-4 md:p-8">
        <!-- Status and Info -->
        <div id="status-message" class="bg-indigo-100 text-indigo-800 p-3 rounded-lg shadow-md mb-6 hidden">
            Data loading...
        </div>

        <!-- Feedback and Actions Header -->
        <div class="flex justify-between items-center mb-4 border-b-2 border-gray-200 pb-2">
            <h2 class="text-2xl font-semibold text-gray-800">Live Student Feedback Threads</h2>
            <button onclick="fetchFeedbackData(true)" class="bg-gray-200 text-gray-700 hover:bg-gray-300 px-4 py-2 rounded-lg text-sm font-medium transition duration-150">
                Refresh Data
            </button>
        </div>
        
        <!-- Feedback Threads Container -->
        <div id="feedback-container" class="space-y-6 scroll-container shadow-inner p-2 md:p-4 rounded-lg bg-white">
            <div class="text-center p-10 text-gray-500" id="initial-loading">Loading threads...</div>
        </div>
    </main>

    <!-- JavaScript Logic -->
    <script>
        // --- 1. CONFIGURATION ---

        // LIVE CSV DATA URL: Your published CSV link from the '0_Filtered View' sheet
        const LIVE_DATA_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQCwS6OqZsI806ccLnNWMPDafrhr1_cvFftnl5JmsygaC1yo54VtwY-P_SIgz7EfwWgTbF9srTeTkOx/pub?gid=72186548&single=true&output=csv";

        // LIVE UPVOTE FORM URL: The isolated pre-filled fragment for Upvote submissions
        const LIVE_UPVOTE_FORM_URL = "https://docs.google.com/forms/d/e/1FAIpQLScmW7ZkSbRhL94B3XlcA8hz0WVuPzqgBcgOmXwTqKXOESrT2Q/viewform?usp=pp_url&entry.467475171="; 

        // LIVE DOWNVOTE FORM URL: The isolated pre-filled fragment for Downvote submissions
        const LIVE_DOWNVOTE_FORM_URL = "https://docs.google.com/forms/d/e/1FAIpQLSfHstlcoj2_JHOYLwJo3QTE4SyrHMAhiFPVOFLpGOMrRJ6BlA/viewform?usp=pp_url&entry.786514782="; 

        // Maps the column headers from your QUERY (D, B, C, E, F, G, H, I) to friendly keys.
        const COLUMN_MAP = {
            'Feedback ID': 0, 
            'Course': 1,      
            'Your Suggestion/Issue': 2, 
            'üëç TOTAL VOTES': 3, 
            'üëé TOTAL DOWNVOTES': 4, 
            'Official MSG Reply': 5, 
            'Click to Upvote': 6,    
            'Click to Downvote': 7,  
        };
        
        // --- 2. DATA UTILITIES ---

        /**
         * Parses the CSV text from Google Sheets into an array of objects.
         * @param {string} csvText - The raw CSV string.
         * @returns {Array<Object>} - Array of feedback objects.
         */
        function parseCSV(csvText) {
            const rows = csvText.trim().split('\n');
            if (rows.length === 0) return [];

            // The header row is the first row. Use it to determine mapping dynamically.
            const headers = rows[0].split(',').map(header => header.trim().replace(/['"]+/g, ''));
            const data = rows.slice(1).map(row => {
                const values = row.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/).map(val => val.trim().replace(/['"]+/g, ''));
                let entry = {};
                
                // Map the data based on the position expected in the COLUMN_MAP
                for (const key in COLUMN_MAP) {
                    const index = COLUMN_MAP[key];
                    entry[key] = values[index] || '';
                }
                return entry;
            }).filter(entry => entry['Course']); // Only keep rows that have a Course listed (hides blank rows)
            
            return data;
        }

        /**
         * Creates a clickable button (link) that opens the pre-filled form.
         * @param {string} urlFragment - The base URL fragment (e.g., LIVE_UPVOTE_FORM_URL).
         * @param {string} feedbackId - The unique ID (e.g., C001).
         * @param {string} label - The button text.
         * @param {string} tailwindClass - Tailwind CSS classes for styling.
         * @returns {string} - HTML string for the button link.
         */
        function createFormLink(urlFragment, feedbackId, label, tailwindClass) {
            // This is the key fix: concatenate the base URL (ending with =) and the ID
            const fullUrl = `${urlFragment}${feedbackId}`; 
            
            // We use target="_blank" to open the vote form in a new tab
            return `<a href="${fullUrl}" target="_blank" class="${tailwindClass} text-xs font-bold transition duration-150 ease-in-out">
                        ${label}
                    </a>`;
        }


        // --- 3. RENDERING ---

        /**
         * Renders the feedback data into the HTML structure.
         * @param {Array<Object>} data - Array of feedback objects.
         */
        function renderFeedback(data) {
            const container = document.getElementById('feedback-container');
            container.innerHTML = ''; 

            if (data.length === 0) {
                container.innerHTML = '<p class="text-center text-gray-500 p-10">No active feedback threads found yet.</p>';
                return;
            }

            // Sort by vote count (optional, but good practice for popular feedback)
            data.sort((a, b) => (parseInt(b['üëç TOTAL VOTES']) || 0) - (parseInt(a['üëç TOTAL VOTES']) || 0));

            data.forEach(thread => {
                const threadId = thread['Feedback ID'];
                
                // Ensure vote counts are numbers, defaulting to 0
                const upvotes = parseInt(thread['üëç TOTAL VOTES']) || 0;
                const downvotes = parseInt(thread['üëé TOTAL DOWNVOTES']) || 0;
                
                const upvoteLink = createFormLink(
                    LIVE_UPVOTE_FORM_URL,
                    threadId,
                    `üëç Upvote (${upvotes})`,
                    'bg-green-100 text-green-800 hover:bg-green-200 px-3 py-1 rounded-full mr-2 shadow-sm'
                );

                const downvoteLink = createFormLink(
                    LIVE_DOWNVOTE_FORM_URL,
                    threadId,
                    `üëé Downvote (${downvotes})`,
                    'bg-red-100 text-red-800 hover:bg-red-200 px-3 py-1 rounded-full shadow-sm'
                );

                const threadHtml = `
                    <div class="thread-card bg-white p-4 rounded-lg shadow-md flex flex-col md:flex-row">
                        
                        <!-- Left Column: Thread Info -->
                        <div class="md:w-1/4 mb-4 md:mb-0 md:border-r md:pr-4">
                            <p class="text-sm text-gray-500 mb-1">
                                <span class="font-mono text-gray-600">ID: ${threadId}</span>
                            </p>
                            <p class="text-lg font-semibold text-gray-900">${thread['Course']}</p>
                            <p class="text-sm text-gray-600 italic">Posted via Anonymous Form</p>
                            
                            <!-- Voting Action -->
                            <div class="mt-3 flex flex-wrap gap-2">
                                ${upvoteLink}
                                ${downvoteLink}
                            </div>
                        </div>

                        <!-- Right Column: Feedback and Official Reply -->
                        <div class="md:w-3/4 md:pl-4">
                            <h3 class="text-md font-medium text-gray-700 mb-2">Student Feedback:</h3>
                            <p class="text-gray-800 mb-4 whitespace-pre-line">${thread['Your Suggestion/Issue']}</p>

                            <!-- Official MSG Reply (Simulated Threaded Response) -->
                            <div class="reply-box p-3 rounded-lg shadow-inner">
                                <p class="font-bold text-gray-900 mb-1">
                                    <span class="text-purple-600">MSG Curriculum Chair Response:</span>
                                </p>
                                <p class="text-gray-700 whitespace-pre-line">${thread['Official MSG Reply'] || 'Awaiting review and official response...'}</p>
                            </div>
                        </div>
                    </div>
                `;
                container.innerHTML += threadHtml;
            });
        }


        // --- 4. FETCHING & INITIALIZATION ---

        async function fetchFeedbackData(isManual = false) {
            const statusDiv = document.getElementById('status-message');
            const container = document.getElementById('feedback-container');
            const loadingText = document.getElementById('initial-loading');

            if (loadingText) loadingText.textContent = 'Refreshing data...';
            if (isManual) statusDiv.textContent = 'Manually refreshing data...';

            try {
                const response = await fetch(LIVE_DATA_URL);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const csvText = await response.text();
                const feedbackData = parseCSV(csvText);
                
                renderFeedback(feedbackData);

                if (isManual) {
                    statusDiv.textContent = `Data refreshed successfully at ${new Date().toLocaleTimeString()}.`;
                    statusDiv.classList.remove('hidden');
                } else if (loadingText) {
                    loadingText.style.display = 'none';
                }

            } catch (error) {
                console.error("Error fetching data:", error);
                // Display a user-friendly error message on the page
                container.innerHTML = `<p class="text-center text-red-600 p-10 font-bold">
                                         ERROR: Could not load live data.
                                       </p>
                                       <p class="text-center text-gray-500">
                                         Please ensure the Google Sheet CSV URL is correct and published to the web.
                                       </p>`;
                if (statusDiv) statusDiv.classList.remove('hidden');
            }
        }

        // Initial load and set automatic refresh
        window.onload = () => {
            fetchFeedbackData();
            // Automatically refresh data every 30 seconds to show vote updates
            setInterval(fetchFeedbackData, 30000); 
        };
    </script>
</body>
</html>
